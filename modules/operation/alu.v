// alu.v

// This module performs ALU operations according to the "alu_func" value,
// which is generated by the ALU control unit.
// Note that there exist 10 R-type instructions in RV32I:
// add, sub, xor, or, and, sll, srl, sra, slt, sltu

`include "modules/utils/defines.v" // change back to this
//`include "../utils/defines.v"   // change later. just for vivado simulation

module alu 
#(parameter DATA_WIDTH = 32)(
  input [DATA_WIDTH-1:0] inputx, 
  input [DATA_WIDTH-1:0] inputy,
  input [3:0] operation,

  output reg [DATA_WIDTH-1:0] result
);

// combinational logic 
always @(*) begin
  case (operation)
    `OP_ADD:  result = inputx +  inputy; 
    `OP_SUB:  result = inputx -  inputy;
    `OP_XOR:  result = inputx ^  inputy;
    `OP_OR:   result = inputx |  inputy;
    `OP_AND:  result = inputx &  inputy;
    `OP_SLL:  result = inputx << inputy[4:0]; // for 32bit register, 5bit shift amount is enough
    `OP_SRL:  result = inputx >> inputy[4:0]; // for 32bit register, 5bit shift amount is enough
    `OP_SRA:  result = $signed(inputx) >>> inputy[4:0]; // for 32bit register, 5bit shift amount is enough
    `OP_SLT:  result = ($signed(inputx) < $signed(inputy)) ? 1 : 0;
    `OP_SLTU: result = (inputx < inputy) ? 1 : 0;
    default:  result = 32'h0000_0000;
  endcase
end

endmodule
